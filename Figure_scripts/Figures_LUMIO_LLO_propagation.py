"""
Figures obtained from LUMIO_simulation
"""
import numpy as np
import matplotlib.pyplot as plt
import LUMIO_LLO_propagation
print("Running [Figure_LUMIO_LLO_simulation.py]")

states = LUMIO_LLO_propagation.states*10**-3
X_Moon = LUMIO_LLO_propagation.X_Moon*10**-3
output = LUMIO_LLO_propagation.output
time = LUMIO_LLO_propagation.time
states_LLO = np.add(states[:, 6:12], X_Moon)

### 2D-view of the system in xy-, xz- and yz-plane
fig1, (ax1, ax2, ax3) = plt.subplots(3, 1, constrained_layout=True, sharey=True)
ax1.plot(0, 0, marker='o', markersize=10, color='blue')
ax1.plot(states[:, 0], states[:, 1], color='orange')
ax1.plot(X_Moon[:, 0], X_Moon[:, 1], color='grey')
ax1.plot(states_LLO[:, 0], states_LLO[:, 1], color='cyan')
ax1.plot(states[0, 0], states[0, 1], marker='o', markersize=4, color='orange')
ax1.plot(X_Moon[0, 0], X_Moon[0, 1],marker='o', markersize=3, color='grey')
ax1.plot(states_LLO[0, 0], states_LLO[0, 1], color='cyan')
ax1.set_title('Trajectory in xy-plane')
ax1.set_xlabel('x-direction [km]')
ax1.set_ylabel('y-direction [km]')
ax2.plot(0, 0, marker='o', markersize=10, color='blue')
ax2.plot(states[:, 0], states[:, 2], color='orange')
ax2.plot(X_Moon[:, 0], X_Moon[:, 2], color='grey')
ax2.plot(states_LLO[:, 0], states_LLO[:, 2], color='cyan')
ax2.plot(states[0, 0], states[0, 2], marker='o', markersize=4, color='orange')
ax2.plot(X_Moon[0, 0], X_Moon[0, 2],marker='o', markersize=3, color='grey')
ax2.plot(states_LLO[0, 0], states_LLO[0, 2], color='cyan')
ax2.set_title('Trajectory in xz-plane')
ax2.set_xlabel('x-direction [km]')
ax2.set_ylabel('z-direction [km]')
ax3.plot(0, 0, marker='o', markersize=10, color='blue')
ax3.plot(states[:, 1], states[:, 2], color='orange')
ax3.plot(X_Moon[:, 1], X_Moon[:, 2], color='grey')
ax3.plot(states_LLO[:, 1], states_LLO[:, 2], color='cyan')
ax3.plot(states[0, 1], states[0, 2], marker='o', markersize=4, color='orange')
ax3.plot(X_Moon[0, 1], X_Moon[0, 2],marker='o', markersize=3, color='grey')
ax3.plot(states_LLO[0, 1], states_LLO[0, 2], color='cyan')
ax3.set_title('Trajectory in yz-plane')
ax3.set_xlabel('y-direction [km]')
ax3.set_ylabel('z-direction [km]')
ax1.legend(['Earth (center)', 'Propagated LUMIO state', 'Moon', 'LLO orbiter'])

### State elements of LUMIO x, y, z
fig2, (bx1, bx2, bx3) = plt.subplots(3, 1, constrained_layout=True, sharey=False)
bx1.plot(time, states[:, 0], color='orange')
bx1.set_title('Trajectory LUMIO in x-direction')
bx1.set_xlabel('Time [days]')
bx1.set_ylabel('x-direction [km]')
bx2.plot(time, states[:, 1], color='orange')
bx2.set_title('Trajectory LUMIO in y-direction')
bx2.set_xlabel('Time [days]')
bx2.set_ylabel('y-direction [km]')
bx3.plot(time, states[:, 2], color='orange')
bx3.set_title('Trajectory LUMIO in z-direction')
bx3.set_xlabel('Time [days]')
bx3.set_ylabel('z-direction [km]')
bx1.legend(['Propagated state element'])

### State elements of LUMIO vx, vy, vz
fig3, (cx1, cx2, cx3) = plt.subplots(3, 1, constrained_layout=True, sharey=False)
cx1.plot(time, states[:, 3], color='orange')
cx1.set_title('Velocity LUMIO in x-direction')
cx1.set_xlabel('Time [days]')
cx1.set_ylabel('Velocity [km/s]')
cx2.plot(time, states[:, 4], color='orange')
cx2.set_title('Velocity LUMIO in y-direction')
cx2.set_xlabel('Time [days]')
cx2.set_ylabel('Velocity [km/s]')
cx3.plot(time, states[:, 5], color='orange')
cx3.set_title('Velocity LUMIO in x-direction')
cx3.set_xlabel('Time [days]')
cx3.set_ylabel('Velocity [km/s]')
cx1.legend(['Propagated state element'])

### 2D-view LLO-Moon
fig4, (dx1, dx2, dx3) = plt.subplots(3, 1, constrained_layout=True, sharey=False)
dx1.plot(0, 0, marker='o', markersize=10, color='grey')
dx1.plot(states[:, 6], states[:, 7], color='cyan')
dx1.plot(states[0, 6], states[0, 7], marker='o', markersize=5, color='blue')
dx1.set_title('LLO-orbiter Moon system xy-plane')
dx1.set_xlabel('x-direction [km]')
dx1.set_ylabel('y-direction [km]')
dx2.plot(0, 0, marker='o', markersize=10, color='grey')
dx2.plot(states[:, 6], states[:, 8], color='cyan')
dx2.plot(states[0, 6], states[0, 8], marker='o', markersize=5, color='blue')
dx2.set_title('LLO-orbiter Moon system xz-plane')
dx2.set_xlabel('x-direction [km]')
dx2.set_ylabel('z-direction [km]')
dx3.plot(0, 0, marker='o', markersize=10, color='grey')
dx3.plot(states[:, 7], states[:, 8], color='cyan')
dx3.plot(states[0, 7], states[0, 8], marker='o', markersize=5, color='blue')
dx3.set_title('LLO-orbiter Moon system yz-plane')
dx3.set_xlabel('y-direction [km]')
dx3.set_ylabel('z-direction [km]')

fig5, axs = plt.subplots(3, 2, constrained_layout=False, sharey=False)
axs[0,0].plot(time, states[:, 6])
axs[0,0].set_title('Position state elements LLO orbiter')
axs[0,0].set_xlabel('Time [days]')
axs[0,0].set_ylabel('Distance from Moon center x-direction [km]')
axs[1,0].plot(time, states[:, 7])
axs[1,0].set_xlabel('Time [days]')
axs[1,0].set_ylabel('Distance from Moon center y-direction [km]')
axs[2,0].plot(time, states[:, 8])
axs[2,0].set_xlabel('Time [days]')
axs[2,0].set_ylabel('Distance from Moon center z-direction [km]')
axs[0,1].plot(time, states[:, 9])
axs[0,1].set_title('Velocity state elements LLO')
axs[0,1].set_xlabel('Time [days]')
axs[0,1].set_ylabel('Velocity x-direction [km/s]')
axs[1,1].plot(time, states[:, 10])
axs[1,1].set_xlabel('Time [days]')
axs[1,1].set_ylabel('Velocity y-direction [km/s]')
axs[2,1].plot(time, states[:, 11])
axs[2,1].set_xlabel('Time [days]')
axs[2,1].set_ylabel('Velocity z-direction [km/s]')

fig6, (ex1, ex2) = plt.subplots(2, 1, constrained_layout=False, sharey=False)
ex1.plot(time, np.linalg.norm(states[:, 6:9], axis=1))
ex1.set_title('Distance LLO orbiter to center Moon')
ex1.set_xlabel('Time [days]')
ex1.set_ylabel('Distance [km]')
ex2.plot(time, np.linalg.norm(states[:, 9:12], axis=1))
ex2.set_title('Velocity LLO orbiter wrt Moon')
ex2.set_xlabel('Time [days]')
ex2.set_ylabel('Velocity [km/s]')

fig7, (fx1, fx2) = plt.subplots(2, 1, constrained_layout=False, sharey=False)
fx1.plot(time, output[:, 3])
fx2.plot(time, output[:, 17])
fx1.set_title('Solar radiation pressure LUMIO')
fx2.set_title('Solar radiation pressure LLO')

### Acceleration contributions of all perturbations LUMIO
plt.figure()
plt.plot(time, np.linalg.norm(output[:, 0:3], axis=1))
plt.plot(time, output[:, 3])
plt.plot(time, output[:, 4])
plt.plot(time, output[:, 5])
plt.plot(time, output[:, 6])
plt.plot(time, output[:, 7])
plt.plot(time, output[:, 8])
plt.plot(time, output[:, 9])
plt.plot(time, output[:, 10])
plt.plot(time, output[:, 11])
plt.plot(time, output[:, 12])
plt.plot(time, output[:, 13])
plt.legend(['Total acceleration', 'Solar Radiation Pressure', 'Spherical harmonic gravity by Earth',
            'Spherical harmonic gravity by Moon', 'Point mass gravity by Sun', 'Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Acceleration distribution on LUMIO')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plt.plot(time, output[:, 3])
plt.plot(time, output[:, 6])
plt.plot(time, output[:, 7])
plt.plot(time, output[:, 8])
plt.plot(time, output[:, 9])
plt.plot(time, output[:, 10])
plt.plot(time, output[:, 11])
plt.plot(time, output[:, 12])
plt.plot(time, output[:, 13])
plt.legend(['SRP', 'Point mass gravity by Sun', 'Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Detailed acceleration distribution of the point masses and SRP on LUMIO')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plt.plot(time, output[:, 7])
plt.plot(time, output[:, 8])
plt.plot(time, output[:, 9])
plt.plot(time, output[:, 10])
plt.plot(time, output[:, 11])
plt.plot(time, output[:, 12])
plt.plot(time, output[:, 13])
plt.legend(['Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Detailed acceleration distribution of the point masses of the planets on LUMIO')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plt.plot(time, np.linalg.norm(output[:, 14:17], axis=1))
plt.plot(time, output[:, 17])
plt.plot(time, output[:, 18])
plt.plot(time, output[:, 19])
plt.plot(time, output[:, 20])
plt.plot(time, output[:, 21])
plt.plot(time, output[:, 22])
plt.plot(time, output[:, 23])
plt.plot(time, output[:, 24])
plt.plot(time, output[:, 25])
plt.plot(time, output[:, 26])
plt.plot(time, output[:, 27])
plt.legend(['Total acceleration', 'Solar Radiation Pressure', 'Spherical harmonic gravity by Earth',
            'Spherical harmonic gravity by Moon', 'Point mass gravity by Sun', 'Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Acceleration distribution on LLO orbiter')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plt.plot(time, output[:, 17])
plt.plot(time, output[:, 18])
plt.plot(time, output[:, 20])
plt.plot(time, output[:, 21])
plt.plot(time, output[:, 22])
plt.plot(time, output[:, 23])
plt.plot(time, output[:, 24])
plt.plot(time, output[:, 25])
plt.plot(time, output[:, 26])
plt.plot(time, output[:, 27])
plt.legend(['Solar Radiation Pressure', 'Spherical harmonic gravity by Earth',
            'Point mass gravity by Sun', 'Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Detailed acceleration distribution on LLO orbiter (No Moon)')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plt.plot(time, output[:, 17])
plt.plot(time, output[:, 20])
plt.plot(time, output[:, 21])
plt.plot(time, output[:, 22])
plt.plot(time, output[:, 23])
plt.plot(time, output[:, 24])
plt.plot(time, output[:, 25])
plt.plot(time, output[:, 26])
plt.plot(time, output[:, 27])
plt.legend(['Solar Radiation Pressure', 'Point mass gravity by Sun', 'Point mass gravity by Mercury',
            'Point mass gravity by Venus', 'Point mass gravity by Mars', 'Point mass gravity by Jupiter',
            'Point mass gravity by Saturn', 'Point mass gravity by Uranus', 'Point mass gravity by Neptune'])
plt.title('Detailed acceleration distribution on LLO orbiter (No Moon and Earth)')
plt.xlabel('Time [days]')
plt.ylabel('Acceleration [m/$s^{2}$]')

plt.figure()
plot = plt.axes(projection='3d')
plot.plot(0, 0, 0, marker='o', markersize=10, color='blue')
plot.plot(states[:, 0], states[:, 1], states[:, 2], color='orange')
plot.plot(X_Moon[:, 0], X_Moon[:, 1], X_Moon[:, 2], color='grey')
plot.plot(states_LLO[:, 0], states_LLO[:, 1], states_LLO[:, 2], color='cyan')
plot.plot(states[0, 0], states[0, 1], states[0, 2], marker='o', markersize=4, color='orange')
plot.plot(X_Moon[0, 0], X_Moon[0, 1], X_Moon[0, 2], marker='o', markersize=4, color='grey')
plot.plot(states_LLO[0, 0], states_LLO[0, 1], states_LLO[0, 2], marker='o', markersize=4, color='cyan')
plt.title('Earth-Moon-LUMIO System overview')
plt.legend(['Earth', 'LUMIO', 'Moon', 'LLO orbiter'])
plot.set_xlabel('x-direction [km]')
plot.set_ylabel('y-direction [km]')
plot.set_zlabel('z-direction [km]')




print("[Figures_LUMIO_simulation.py] successfully ran \n")
plt.show()

